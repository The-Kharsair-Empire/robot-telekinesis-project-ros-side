# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ur3_robotics/UR3ServiceMsgRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ur3_robotics.msg

class UR3ServiceMsgRequest(genpy.Message):
  _md5sum = "96b86e5a23687685361fc807179e53a0"
  _type = "ur3_robotics/UR3ServiceMsgRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """UR3Joints joint_input

================================================================================
MSG: ur3_robotics/UR3Joints
float64 joint_base
float64 joint_shoulder
float64 joint_elbow
float64 joint_wrist1
float64 joint_wrist2
float64 joint_wrist3

"""
  __slots__ = ['joint_input']
  _slot_types = ['ur3_robotics/UR3Joints']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       joint_input

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(UR3ServiceMsgRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.joint_input is None:
        self.joint_input = ur3_robotics.msg.UR3Joints()
    else:
      self.joint_input = ur3_robotics.msg.UR3Joints()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6d().pack(_x.joint_input.joint_base, _x.joint_input.joint_shoulder, _x.joint_input.joint_elbow, _x.joint_input.joint_wrist1, _x.joint_input.joint_wrist2, _x.joint_input.joint_wrist3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.joint_input is None:
        self.joint_input = ur3_robotics.msg.UR3Joints()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.joint_input.joint_base, _x.joint_input.joint_shoulder, _x.joint_input.joint_elbow, _x.joint_input.joint_wrist1, _x.joint_input.joint_wrist2, _x.joint_input.joint_wrist3,) = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6d().pack(_x.joint_input.joint_base, _x.joint_input.joint_shoulder, _x.joint_input.joint_elbow, _x.joint_input.joint_wrist1, _x.joint_input.joint_wrist2, _x.joint_input.joint_wrist3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.joint_input is None:
        self.joint_input = ur3_robotics.msg.UR3Joints()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.joint_input.joint_base, _x.joint_input.joint_shoulder, _x.joint_input.joint_elbow, _x.joint_input.joint_wrist1, _x.joint_input.joint_wrist2, _x.joint_input.joint_wrist3,) = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ur3_robotics/UR3ServiceMsgResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ur3_robotics.msg

class UR3ServiceMsgResponse(genpy.Message):
  _md5sum = "e920b0e8b337d3e7d5ef4a47e929a85d"
  _type = "ur3_robotics/UR3ServiceMsgResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """UR3Joints[] trajectories


================================================================================
MSG: ur3_robotics/UR3Joints
float64 joint_base
float64 joint_shoulder
float64 joint_elbow
float64 joint_wrist1
float64 joint_wrist2
float64 joint_wrist3

"""
  __slots__ = ['trajectories']
  _slot_types = ['ur3_robotics/UR3Joints[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       trajectories

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(UR3ServiceMsgResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.trajectories is None:
        self.trajectories = []
    else:
      self.trajectories = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.trajectories)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectories:
        _x = val1
        buff.write(_get_struct_6d().pack(_x.joint_base, _x.joint_shoulder, _x.joint_elbow, _x.joint_wrist1, _x.joint_wrist2, _x.joint_wrist3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.trajectories is None:
        self.trajectories = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectories = []
      for i in range(0, length):
        val1 = ur3_robotics.msg.UR3Joints()
        _x = val1
        start = end
        end += 48
        (_x.joint_base, _x.joint_shoulder, _x.joint_elbow, _x.joint_wrist1, _x.joint_wrist2, _x.joint_wrist3,) = _get_struct_6d().unpack(str[start:end])
        self.trajectories.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.trajectories)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectories:
        _x = val1
        buff.write(_get_struct_6d().pack(_x.joint_base, _x.joint_shoulder, _x.joint_elbow, _x.joint_wrist1, _x.joint_wrist2, _x.joint_wrist3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.trajectories is None:
        self.trajectories = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectories = []
      for i in range(0, length):
        val1 = ur3_robotics.msg.UR3Joints()
        _x = val1
        start = end
        end += 48
        (_x.joint_base, _x.joint_shoulder, _x.joint_elbow, _x.joint_wrist1, _x.joint_wrist2, _x.joint_wrist3,) = _get_struct_6d().unpack(str[start:end])
        self.trajectories.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
class UR3ServiceMsg(object):
  _type          = 'ur3_robotics/UR3ServiceMsg'
  _md5sum = '7ca54bd198e5048726b3fe77d5b5509c'
  _request_class  = UR3ServiceMsgRequest
  _response_class = UR3ServiceMsgResponse
