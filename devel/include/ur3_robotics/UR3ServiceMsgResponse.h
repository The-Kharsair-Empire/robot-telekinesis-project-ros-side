// Generated by gencpp from file ur3_robotics/UR3ServiceMsgResponse.msg
// DO NOT EDIT!


#ifndef UR3_ROBOTICS_MESSAGE_UR3SERVICEMSGRESPONSE_H
#define UR3_ROBOTICS_MESSAGE_UR3SERVICEMSGRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ur3_robotics/UR3Joints.h>

namespace ur3_robotics
{
template <class ContainerAllocator>
struct UR3ServiceMsgResponse_
{
  typedef UR3ServiceMsgResponse_<ContainerAllocator> Type;

  UR3ServiceMsgResponse_()
    : trajectories()  {
    }
  UR3ServiceMsgResponse_(const ContainerAllocator& _alloc)
    : trajectories(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::ur3_robotics::UR3Joints_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ur3_robotics::UR3Joints_<ContainerAllocator> >::other >  _trajectories_type;
  _trajectories_type trajectories;





  typedef boost::shared_ptr< ::ur3_robotics::UR3ServiceMsgResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ur3_robotics::UR3ServiceMsgResponse_<ContainerAllocator> const> ConstPtr;

}; // struct UR3ServiceMsgResponse_

typedef ::ur3_robotics::UR3ServiceMsgResponse_<std::allocator<void> > UR3ServiceMsgResponse;

typedef boost::shared_ptr< ::ur3_robotics::UR3ServiceMsgResponse > UR3ServiceMsgResponsePtr;
typedef boost::shared_ptr< ::ur3_robotics::UR3ServiceMsgResponse const> UR3ServiceMsgResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ur3_robotics::UR3ServiceMsgResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ur3_robotics::UR3ServiceMsgResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ur3_robotics

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'ur3_robotics': ['/home/ialab2020/Desktop/ros_ur3_unity_vr/src/ur3_robotics/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ur3_robotics::UR3ServiceMsgResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ur3_robotics::UR3ServiceMsgResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ur3_robotics::UR3ServiceMsgResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ur3_robotics::UR3ServiceMsgResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur3_robotics::UR3ServiceMsgResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur3_robotics::UR3ServiceMsgResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ur3_robotics::UR3ServiceMsgResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e920b0e8b337d3e7d5ef4a47e929a85d";
  }

  static const char* value(const ::ur3_robotics::UR3ServiceMsgResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe920b0e8b337d3e7ULL;
  static const uint64_t static_value2 = 0xd5ef4a47e929a85dULL;
};

template<class ContainerAllocator>
struct DataType< ::ur3_robotics::UR3ServiceMsgResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ur3_robotics/UR3ServiceMsgResponse";
  }

  static const char* value(const ::ur3_robotics::UR3ServiceMsgResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ur3_robotics::UR3ServiceMsgResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "UR3Joints[] trajectories\n\
\n\
\n\
================================================================================\n\
MSG: ur3_robotics/UR3Joints\n\
float64 joint_base\n\
float64 joint_shoulder\n\
float64 joint_elbow\n\
float64 joint_wrist1\n\
float64 joint_wrist2\n\
float64 joint_wrist3\n\
\n\
";
  }

  static const char* value(const ::ur3_robotics::UR3ServiceMsgResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ur3_robotics::UR3ServiceMsgResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.trajectories);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UR3ServiceMsgResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ur3_robotics::UR3ServiceMsgResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ur3_robotics::UR3ServiceMsgResponse_<ContainerAllocator>& v)
  {
    s << indent << "trajectories[]" << std::endl;
    for (size_t i = 0; i < v.trajectories.size(); ++i)
    {
      s << indent << "  trajectories[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ur3_robotics::UR3Joints_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectories[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // UR3_ROBOTICS_MESSAGE_UR3SERVICEMSGRESPONSE_H
